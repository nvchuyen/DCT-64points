--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV GX" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=6 LPM_WIDTHB=9 LPM_WIDTHP=15 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 12.1 cbx_cycloneii 2012:11:07:18:03:51:SJ cbx_lpm_add_sub 2012:11:07:18:03:51:SJ cbx_lpm_mult 2012:11:07:18:03:51:SJ cbx_mgl 2012:11:07:18:06:30:SJ cbx_padd 2012:11:07:18:03:51:SJ cbx_stratix 2012:11:07:18:03:51:SJ cbx_stratixii 2012:11:07:18:03:51:SJ cbx_util_mgl 2012:11:07:18:03:51:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 81 
SUBDESIGN mult_bho
( 
	dataa[5..0]	:	input;
	datab[8..0]	:	input;
	result[14..0]	:	output;
) 
VARIABLE
	add12_result[11..0]	:	WIRE;
	add16_result[7..0]	:	WIRE;
	add8_result[14..0]	:	WIRE;
	cs2a[2..0] : carry_sum;
	cs4a[2..0] : carry_sum;
	le3a[9..0] : lcell;
	le5a[9..0] : lcell;
	le6a[9..0] : lcell;
	le7a[9..0] : lcell;
	sft10a[14..0] : soft;
	sft11a[14..0] : soft;
	sft13a[11..0] : soft;
	sft14a[11..0] : soft;
	sft15a[11..0] : soft;
	sft17a[7..0] : soft;
	sft18a[7..0] : soft;
	sft19a[7..0] : soft;
	sft9a[14..0] : soft;
	dataa_node[8..0]	: WIRE;
	datab_node[5..0]	: WIRE;
	final_result_node[14..0]	: WIRE;
	w100w[9..0]	: WIRE;
	w12w[5..0]	: WIRE;
	w13w[9..0]	: WIRE;
	w145w[9..0]	: WIRE;
	w192w	: WIRE;
	w208w	: WIRE;
	w309w[14..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs2a[].cin = ( B"0", ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), datab_node[1..1]);
	cs2a[].sin = ( cs2a[1].cout, ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), datab_node[1..1]);
	cs4a[].cin = ( B"0", ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), datab_node[1..1]);
	cs4a[].sin = ( (w12w[4..4] $ cs4a[1].cout), ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), datab_node[0..0]);
	le3a[].in = (((((w12w[5..5] & (! w12w[4..4])) & (! cs2a[2].sout)) & (! ( dataa_node[], B"0"))) # ((((! w12w[5..5]) & w12w[4..4]) & cs2a[2].sout) & ( dataa_node[], B"0"))) # ((w12w[5..5] & w12w[4..4]) & cs2a[2].sout));
	le5a[].in = (! ((! le3a[].out) & (! (cs4a[2].sout & (w12w[5..5] $ ( dataa_node[8..8], dataa_node[]))))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[8..8], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[8..8], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[8..8], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[8..8], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	sft10a[].in = ( w208w, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( w208w, cs2a[0].sout))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w208w, ( w192w, ( le5a[7..7].out, ( le5a[6..6].out, ( le5a[5..5].out, ( le5a[4..4].out, ( le5a[3..3].out, ( le5a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le6a[3..2].out)))))))))));
	sft14a[].in = ( w208w, ( w208w, ( (! w145w[9..9]), ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( w208w, cs2a[1].sout)))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w208w, ( w192w, ( (! w100w[9..9]), ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le6a[5..4].out)))))));
	sft18a[].in = ( w208w, ( w208w, ( w192w, ( w208w, ( w208w, ( w208w, ( w208w, w12w[5..5])))))));
	sft19a[].in = add16_result[];
	sft9a[].in = ( w192w, ( (! w13w[9..9]), ( le5a[8..8].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[1..0].out))))))))))))));
	dataa_node[] = ( datab[8..0]);
	datab_node[] = ( dataa[5..0]);
	final_result_node[] = ( w309w[14..0]);
	result[] = ( final_result_node[14..0]);
	w100w[] = le6a[].out;
	w12w[] = datab_node[];
	w13w[] = le5a[].out;
	w145w[] = le7a[].out;
	w192w = B"1";
	w208w = B"0";
	w309w[] = ( sft11a[14..13].out, sft11a[12..11].out, sft11a[10..9].out, sft11a[8..7].out, sft11a[6..5].out, sft11a[4..3].out, sft11a[2..1].out, sft11a[0..0].out);
END;
--VALID FILE
